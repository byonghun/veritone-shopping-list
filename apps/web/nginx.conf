# Note: Defines a named pool of the backend servers
# Benefits:
# 1. Connection pooling/keepalive: Lets Nginx reuse idle HTTP/1.1
# connections to the backend, cutting handshake overhead and CPU
# 2. Better resilience: combine with directives like proxy_next_upstream to fail over seamlessly
upstream api_backend {
  server server:3001;
  keepalive 64;
}

server {
  # Note: Tells Nginx to accept connections on Transmission Control Protocol
  # port eighty using Hypertext Transfer Protocol (HTTP) without Trsnaport Layer Security (TLS)
  listen 80;
  # Note: "Match any server name"
  server_name _;

  root /usr/share/nginx/html;
  index index.html;

  # Enable gzip for text assets
  # Note: Reduces bytes over the network
  gzip on;
  # Note: Higher compresses more but uses more CPU.
  # 6 is a good balance for production
  gzip_comp_level 6;
  # Note: Only compress responses larger than 512 byes
  # Small responses can grow or waste CPU if compressed
  gzip_min_length 512;
  gzip_vary on;
  # Note: Lists the response content types that will be compressed
  gzip_types
    text/plain text/css text/javascript application/javascript
    application/json application/manifest+json application/xml
    application/rss+xml image/svg+xml font/ttf font/otf
    application/vnd.ms-fontobject;

  # API + SSE proxy (fixes text/html for EventSource)
  # reverse-proxy
  location /api/ {
    # docker-compose service "server"
    proxy_pass http://api_backend;
    # Note: Use HTTP version 1.1 to the upstream
    # Required for streaming responses for server-sent events
    # and enabling persistent connections
    proxy_http_version 1.1;

    # pass-thru headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # SSE essentials
    # Note: Disable proxy response buffering.
    # For server-sent events you want each event to flush
    # through immediately rather than being held in a buffer
    proxy_buffering off;
    proxy_cache off;
    proxy_read_timeout 1h;
    # Note: Avoids unwanted behaviors influencing the proxied connection
    proxy_set_header Connection '';
    # Note: Disable Nginx internal buffering header explicitly for streams
    add_header X-Accel-Buffering "no";
  }

  # Optional: if you have SSE under /api/v1/sse/, explicitly disable gzip there
  # Note: Starts a higer-priority prefix location for paths.
  # ^~ modifier tells Nginx to stop searching for regular expression locations if this prefix matches
  # Ensures server-sent events use the exact settings in this block and do not inherit conflicting ones
  location ^~ /api/v1/sse/ {
    proxy_pass http://api_backend;
    proxy_http_version 1.1;
    # Note: Disable response buffering for low latency delivery of events
    proxy_buffering off;
    proxy_cache off;
    proxy_read_timeout 1h;
    proxy_set_header Connection '';
    # Note: turn off gzip compression specifically for server-sent events.
    # !Important for SSE: Compression layers and some proxies can coalese or delay chunks
    # -> which breaks delivery of events
    gzip off;                               
    add_header Cache-Control "no-cache, no-transform" always;
    # Note: Disable Nginx internal buffering header explicitly for streams
    add_header X-Accel-Buffering "no" always;
  }

  # Cache static assets aggressively
  location ~* \.(?:js|css|woff2|svg)$ {
    add_header Cache-Control "public, max-age=31536000, immutable";
    try_files $uri =404;
  }

  # Images (cache for a week)
  location ~* \.(?:png|jpg|jpeg|gif|ico)$ {
    add_header Cache-Control "public, max-age=604800";
    try_files $uri =404;
  }

  # Health endpoint
  location = /healthz {
    add_header Content-Type text/plain;
    return 200 "ok\n";
  }

  # SPA fallback (React Router)
  location / {
    try_files $uri /index.html;
  }
}